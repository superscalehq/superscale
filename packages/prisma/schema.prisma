// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String                   @id @default(cuid())
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  deletedAt      DateTime?
  name           String?
  email          String?                  @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  memberships    OrganizationMembership[]
  accounts       Account[]
  sessions       Session[]
  UserInvitation UserInvitation[]

  @@index([email])
}

// Account is an external account from a third-party provider in the OAuth flow.
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// VerificationToken is NextAuth-specific. It is used to verify a user's email address.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// An Organization is the main point of entry to the application. A user can't do anything until they create or join an organization.
// A User can be a member of any number of Organizations.
model Organization {
  id                  String                   @id @default(cuid())
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  deletedAt           DateTime?
  name                String                   @unique
  slug                String                   @unique
  completedOnboarding Boolean                  @default(false)
  members             OrganizationMembership[]
  UserInvitation      UserInvitation[]
  Integration         Integration[]
}

// Member is a join table that links Users to Organizations.
model OrganizationMembership {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  role           OrganizationRole

  @@unique([userId, organizationId])
}

// OrganizationRole is used for RBAC for Organization operations.
enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
}

// An UserInvitation is a link that can be sent to a user to invite them to join an Organization.
model UserInvitation {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  createdBy      User             @relation(fields: [createdById], references: [id])
  createdById    String
  email          String
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role           OrganizationRole

  @@unique([email, organizationId])
  @@index([organizationId])
}

// IntegrationType is the type of integration, typically OAUTH or API. Currently, only OAUTH is supported.
enum IntegrationType {
  OAUTH
}

// IntegrationProvider is the provider of the integration. Currently, only Shopify is supported.
enum IntegrationProvider {
  SHOPIFY
}

// Integration is a third-party integration that can be used to connect to a third-party service.
model Integration {
  id                  String                  @id @default(cuid())
  externalId          String
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @default(now()) @updatedAt
  deletedAt           DateTime?
  integrationProvider IntegrationProvider
  integrationType     IntegrationType
  /// [IntegrationMetadata]
  metadata            Json?
  organizationId      String
  organization        Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  credentials         IntegrationCredential[]

  @@unique([externalId, integrationProvider])
  @@index([organizationId])
}

enum CredentialType {
  API_KEY
  OAUTH_ACCESS_TOKEN
  OAUTH_REFRESH_TOKEN
}

// IntegrationCredential is a credential that can be used to connect to a third-party service.
model IntegrationCredential {
  id                 String         @id @default(cuid())
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @default(now()) @updatedAt
  deletedAt          DateTime?
  expiresAt          DateTime? // null indicates that the credential never expires.
  credentialType     CredentialType
  credentialValue    String
  /// [CredentialMetadata]
  credentialMetadata Json? // Metadata such as the scopes of the OAuth credential, or, in the case of API keys, the name of the key etc.
  integrationId      String
  integration        Integration    @relation(fields: [integrationId], references: [id], onDelete: Cascade)
}

enum CustomerType {
  SHOPIFY
  ANONYMOUS
}

model Customer {
  id         String       @id @default(cuid())
  externalId String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  deletedAt  DateTime?
  type       CustomerType
  Ticket     Ticket[]
}

enum TicketStatus {
  OPEN
  CLOSED
}

model Ticket {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  deletedAt  DateTime?
  status     TicketStatus
  customerId String
  customer   Customer     @relation(fields: [customerId], references: [id])
}
